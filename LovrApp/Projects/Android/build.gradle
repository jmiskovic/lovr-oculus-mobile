apply plugin: 'com.android.application'

dependencies {
  implementation project(':cmakelib')
}

apply from: "${rootProject.projectDir}/VrApp.gradle"

android {
  // This is the name of the generated apk file, which will have
  // -debug.apk or -release.apk appended to it.
  // The filename doesn't effect the Android installation process.
  // Use only letters to remain compatible with the package name.
  project.archivesBaseName = "app"

  defaultConfig {
    // Gradle replaces the manifest package with this value, which must
    // be unique on a system.  If you don't change it, a new app
    // will replace an older one.
    applicationId "org.indeck." + project.archivesBaseName
    minSdkVersion 23
    targetSdkVersion 25
    compileSdkVersion 26

    // override app plugin abiFilters for both 32 and 64-bit support
    externalNativeBuild {
        ndk {
                abiFilters 'arm64-v8a'
        }
        ndkBuild {
                abiFilters 'arm64-v8a'
        }
    }
  }

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      debug {
        manifest.srcFile 'AndroidManifest-Debug.xml'
      }
      release {
        manifest.srcFile 'AndroidManifest-Release.xml'
      }

      java.srcDirs = ['../../java']
      jniLibs.srcDir 'libs'
      res.srcDirs = ['../../res']
      assets.srcDirs = ['../../assets']

      def addPathFrom = {
        def pathFilePath = it // Closure argument
        def pathFile = file(pathFilePath) // File object pointed to by closure argument
        if (pathFile.exists()) {
          def path = pathFile.text.trim() // Contents of the file specified by pathFilePath
          if (!path)
            throw new InvalidUserDataException(pathFilePath + " exists but is empty")
          // User-specified path interpreted relative to PROJECTPATH/../.. :
          def truePathObject = file("../..").toPath().resolve(path)
          def truePathFile = file(truePathObject) // File object for user-specified path
          if (!truePathFile.exists())
            throw new InvalidUserDataException(pathFilePath + " points to \""
              + truePathObject.toAbsolutePath() + "\", but this does not exist")
          def truePath = truePathObject.toRealPath() // User-specified path, absolute + normalized
          if (!truePathFile.isDirectory())
            throw new InvalidUserDataException(pathFilePath + " points to \"" + truePath
              + "\", but this is a file and not a directory")
          assets.srcDirs += [truePath] // Add user-speicfied path to srcDirs
        }
      }
      addPathFrom('../../local_assets')
      addPathFrom('../../local_assets.txt')
    }
  }

  // This linter option is only useful for Google Play
  lintOptions{
      disable 'ExpiredTargetSdkVersion'
  }
}
